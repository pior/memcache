
Meta Debug
----------

The meta debug command is a human readable dump of all available internal
metadata of an item, minus the value.

me <key> <flag>\r\n

- <key> means one key string.
- if <flag> is 'b', then <key> is a base64 encoded binary value. the response
  key will also be base64 encoded.

The response looks like:

ME <key> <k>=<v>*\r\n

A miss looks like:

EN\r\n

Each of the keys and values are the internal data for the item.

exp   = expiration time
la    = time in seconds since last access
cas   = CAS ID
fetch = whether an item has been fetched before
cls   = slab class id
size  = total size in bytes

Others may be added.

Meta Get
--------

The meta get command is the generic command for retrieving key data from
memcached. Based on the flags supplied, it can replace all of the commands:
"get", "gets", "gat", "gats", "touch", as well as adding new options.

mg <key> <flags>*\r\n

- <key> means one key string. Unlike "get" metaget can only take a single key.

- <flags> are a set of single character codes ended with a space or newline.
  flags may have token strings after the initial character.

After this command, the client expects an item to be returned, received as a
text line followed by an optional data block.

If a response line appearing in a retrieval request is not sent back
by the server this means that the server does not
have the item (because it was never stored, or stored
but deleted to make space for more items, or expired, or explicitly
deleted by a client).

An item sent by the server looks like:

VA <size> <flags>*\r\n
<data block>\r\n

- <size> is the size of <data block> in bytes, minus the \r\n

- <flags>* are flags returned by the server, based on the command flags.
  They are added in order specified by the flags sent.

- <data block> is the data for this item. Note that the data block is
  optional, requiring the 'v' flag to be supplied.

If the request did not ask for a value in the response (v) flag, the server
response looks like:

HD <flags>*\r\n

If the request resulted in a miss, the response looks like:

EN\r\n

Unless the (q) flag was supplied, which suppresses the status code for a miss.

The flags used by the 'mg' command are:

- b: interpret key as base64 encoded binary value
- c: return item cas token
- f: return client flags token
- h: return whether item has been hit before as a 0 or 1
- k: return key as a token
- l: return time since item was last accessed in seconds
- O(token): opaque value, consumes a token and copies back with response
- q: use noreply semantics for return codes.
- s: return item size token
- t: return item TTL remaining in seconds (-1 for unlimited)
- u: don't bump the item in the LRU
- v: return item value in <data block>

These flags can modify the item:
- E(token): use token as new CAS value if item is modified
- N(token): vivify on miss, takes TTL as a argument
- R(token): if remaining TTL is less than token, win for recache
- T(token): update remaining TTL

These extra flags can be added to the response:
- W: client has "won" the recache flag
- X: item is stale
- Z: item has already sent a winning flag

The flags are now repeated with detailed information where useful:

- b: interpret key as base64 encoded binary value

This flag instructs memcached to run a base64 decoder on <key> before looking
it up. This allows storing and fetching of binary packed keys, so long as they
are sent to memcached in base64 encoding.

If 'b' flag is sent in the response, and a key is returned via 'k', this
signals to the client that the key is base64 encoded binary.

- h: return whether item has been hit before as a 0 or 1
- l: return time since item was last accessed in seconds

The above two flags return the value of "hit before?" and "last access time"
before the command was processed. Otherwise this would always show a 1 for
hit or always show an access time of "0" unless combined with the "u" flag.

- O(token): opaque value, consumes a token and copies back with response

The O(opaque) token is used by this and other commands to allow easier
pipelining of requests while saving bytes on the wire for responses. For
example: if pipelining three get commands together, you may not know which
response belongs to which without also retrieving the key. If the key is very
long this can generate a lot of traffic, especially if the data block is very
small. Instead, you can supply an "O" flag for each mg with tokens of "1" "2"
and "3", to match up responses to the request.

Opaque tokens may be up to 32 bytes in length, and are a string similar to
keys.

- q: use noreply semantics for return codes.

Noreply is a method of reducing the amount of data sent back by memcached to
the client for normal responses. In the case of metaget, if an item is not
available the "VA" line is normally not sent, and the response is terminated by
"EN\r\n".

With noreply enabled, the "EN\r\n" marker is suppressed. This allows you to
pipeline several mg's together and read all of the responses without the
"EN\r\n" lines in the middle.

Errors are always returned.

- u: don't bump the item in the LRU

It is possible to access an item without causing it to be "bumped" to the head
of the LRU. This also avoids marking an item as being hit or updating its last
access time.

- v: return item value in <data block>

The data block for a metaget response is optional, requiring this flag to be
passed in. The response code also changes from "HD" to "VA <size>"

These flags can modify the item:
- E(token): use token as new CAS value if item is modified

Normally when an item is created it is given a CAS value from an internal
atomically incrementing counter. This allows overriding the CAS (8 byte
unsigned integer) with the specified value. This is useful for using an
external system to version cache data (row versions, clocks, etc).

- N(token): vivify on miss, takes TTL as a argument

Used to help with so called "dog piling" problems with recaching of popular
items. If supplied, and metaget does not find the item in cache, it will
create a stub item with the key and TTL as supplied. If such an item is
created a 'W' flag is added to the response to indicate to a client that they
have "won" the right to recache an item.

The automatically created item has 0 bytes of data.

Further requests will see a 'Z' flag to indicate that another client has
already received the win flag.

Can be combined with CAS flags to gate the update further.

- R(token): if token is less than remaining TTL win for recache

Similar to and can be combined with 'N'. If the remaining TTL of an item is
below the supplied token, return a 'W' flag to indicate the client has "won"
the right to recache an item. This allows refreshing an item before it leads to
a miss.

- T(token): update remaining TTL

Similar to "touch" and "gat" commands, updates the remaining TTL of an item if
hit.

These extra flags can be added to the response:
- W: client has "won" the recache flag

When combined with N or R flags, a client may be informed they have "won"
ownership of a cache item. This allows a single client to be atomically
notified that it should cache or update an item. Further clients requesting
the item can use the existing data block (if valid or stale), retry, wait, or
take some other action while the item is missing.

This is used when the act of recaching an item can cause undue load on another
system (CPU, database accesses, time, and so on).

- X: item is stale

Items can be marked as stale by the metadelete command. This indicates to the
client that an object needs to be updated, and that it should make a decision
o if potentially stale data is safe to use.

This is used when you want to convince clients to recache an item, but it's
safe to use pre-existing data while the recache happens.

- Z: item has already sent a winning flag

When combined with the X flag, or the client N or R flags, this extra response
flag indicates to a client that a different client is responsible for
recaching this item. If there is data supplied it may use it, or the client
may decide to retry later or take some other action.

Meta Set
--------

The meta set command a generic command for storing data to memcached. Based
on the flags supplied, it can replace all storage commands (see token M) as
well as adds new options.

ms <key> <datalen> <flags>*\r\n

- <key> means one key string.

- <datalen> is the length of the payload data.

- <flags> are a set of single character codes ended with a space or newline.
  flags may have strings after the initial character.

After this line, the client sends the data block:

<data block>\r\n

- <data block> is a chunk of arbitrary 8-bit data of length supplied by an 'S'
  flag and token from the request line. If no 'S' flag is supplied the data
  is assumed to be 0 length.

After sending the command line and the data block the client awaits
the reply, which is of the format:

<CD> <flags>*\r\n

Where CD is one of:

- "HD" (STORED), to indicate success.

- "NS" (NOT_STORED), to indicate the data was not stored, but not
because of an error.

- "EX" (EXISTS), to indicate that the item you are trying to store with
CAS semantics has been modified since you last fetched it.

- "NF" (NOT_FOUND), to indicate that the item you are trying to store
with CAS semantics did not exist.

The flags used by the 'ms' command are:

- b: interpret key as base64 encoded binary value (see metaget)
- c: return CAS value if successfully stored.
- C(token): compare CAS value when storing item
- E(token): use token as new CAS value (see metaget for detail)
- F(token): set client flags to token (32 bit unsigned numeric)
- I: invalidate. set-to-invalid if supplied CAS is older than item's CAS
- k: return key as a token
- O(token): opaque value, consumes a token and copies back with response
- q: use noreply semantics for return codes
- s: return the size of the stored item on success (ie; new size on append)
- T(token): Time-To-Live for item, see "Expiration" above.
- M(token): mode switch to change behavior to add, replace, append, prepend
- N(token): if in append mode, autovivify on miss with supplied TTL

The flags are now repeated with detailed information where useful:

- c: returns the CAS value on successful storage. Will return 0 on error, but
  clients must not depend on the return value being zero. In future versions
this may return the current CAS value for "EX" return code conditions.

- C(token): compare CAS value when storing item

Similar to the basic "cas" command, only store item if the supplied token
matches the current CAS value of the item. When combined with the 'I' flag, a
CAS value that is _lower_ than the current value may be accepted, but the item
will be marked as "stale", returning the X flag with mget requests.

- F(token): set client flags to token (32 bit unsigned numeric)

Sets flags to 0 if not supplied.

- I: invalid. set-to-invalid if CAS is older than it should be.

Functional when combined with 'C' flag above.

- O(token): opaque value, consumes a token and copies back with response

See description under 'Meta Get'

- q: use noreply semantics for return codes

Noreply is a method of reducing the amount of data sent back by memcached to
the client for normal responses. In the case of metaset, a response that
would start with "HD" will not be sent. Any other code, such as "EX"
(EXISTS) will still be returned.

Errors are always returned.

- M(token): mode switch. Takes a single character for the mode.

E: "add" command. LRU bump and return NS if item exists. Else
add.
A: "append" command. If item exists, append the new value to its data.
P: "prepend" command. If item exists, prepend the new value to its data.
R: "replace" command. Set only if item already exists.
S: "set" command. The default mode, added for completeness.

The "cas" command is supplanted by specifying the cas value with the 'C' flag.
Append and Prepend modes will also respect a supplied cas value.

- N(token): if in append mode, autovivify on miss with supplied TTL

Append and Prepend modes normally ignore the T argument, as they cannot create
a new item on a miss. If N is supplied, and append reaches a miss, it will
create a new item seeded with the data from the append command. It uses the
TTL from N instead of T to be consistent with the usage of N in other
commands.

Meta Delete
-----------

The meta delete command allows for explicit deletion of items, as well as
marking items as "stale" to allow serving items as stale during revalidation.

md <key> <flags>*\r\n

- <key> means one key string.

- <flags> are a set of single character codes ended with a space or newline.
  flags may have strings after the initial character.

The response is in the format:

<CD> <flags> <tokens>*\r\n

Where CD is one of:

- "HD" (DELETED), to indicate success

- "NF" (NOT_FOUND), to indicate that the item with this key was not found.

- "EX" (EXISTS), to indicate that the supplied CAS token does not match the
  stored item.

The flags used by the 'md' command are:

- b: interpret key as base64 encoded binary value (see metaget)
- C(token): compare CAS value
- E(token): use token as new CAS value (see metaget for detail)
- I: invalidate. mark as stale, bumps CAS.
- k: return key
- O(token): opaque to copy back.
- q: noreply
- T(token): updates TTL, only when paired with the 'I' flag
- x: removes the item value, but leaves the item.

The flags are now repeated with detailed information where useful:

- C(token): compare CAS value

Can be used to only delete or mark-stale if a supplied CAS value matches.

- I: invalidate. mark as stale, bumps CAS.

Instead of removing an item, this will give the item a new CAS value and mark
it as stale. This means when it is later fetched by metaget, the client will
be supplied an 'X' flag to show the data is stale and needs to be recached.

- O(token): opaque to copy back.

See description under 'Meta Get'

- q: noreply

See description under 'Meta Set'. In the case of meta delete, this will hide
response lines with the code "DE". It will still return any other responses.

- T(token): updates TTL, only when paired with the 'I' flag

When marking an item as stale with 'I', the 'T' flag can be used to update the
TTL as well; limiting the amount of time an item will live while stale and
waiting to be recached.

- x: removes the item value, but leaves the item.

This deletes the value off of an item (by replacing it with an empty value
item atomically). Combined with I this can leave what is effectively a
tombstone of a previous value.

Meta Arithmetic
---------------

The meta arithmetic command allows for basic operations against numerical
values. This replaces the "incr" and "decr" commands. Values are unsigned
64bit integers. Decrementing will reach 0 rather than underflow. Incrementing
can overflow.

ma <key> <flags>*\r\n

- <key> means one key string.

- <flags> are a set of single character codes ended with a space or newline.
  flags may have strings after the initial character.

The response is in the format:

<CD> <flags> <tokens>*\r\n

Where CD is one of:

- "HD" to indicate success

- "NF" (NOT_FOUND), to indicate that the item with this key was not found.

- "NS" (NOT_STORED), to indicate that the item was not created as requested
  after a miss.

- "EX" (EXISTS), to indicate that the supplied CAS token does not match the
  stored item.

If the 'v' flag is supplied, the response is formatted as:

VA <size> <flags>*\r\n
<number>\r\n

The flags used by the 'ma' command are:

- b: interpret key as base64 encoded binary value (see metaget)
- C(token): compare CAS value (see mset)
- E(token): use token as new CAS value (see metaget for detail)
- N(token): auto create item on miss with supplied TTL
- J(token): initial value to use if auto created after miss (default 0)
- D(token): delta to apply (decimal unsigned 64-bit number, default 1)
- T(token): update TTL on success
- M(token): mode switch to change between incr and decr modes.
- O(token): opaque value, consumes a token and copies back with response
- q: use noreply semantics for return codes (see details under mset)
- t: return current TTL
- c: return current CAS value if successful.
- v: return new value
- k: return key as a token

The flags are now repeated with detailed information where useful:

- C(token): compare CAS value

Can be used to only incr/decr if a supplied CAS value matches. A new CAS value
is generated after a delta is applied. Add the 'c' flag to get the new CAS
value after success.

- N(token): auto create item on miss with supplied TTL

Similar to mget, on a miss automatically create the item. A value can be
seeded using the J flag.

- J(token): initial value

An unsigned 64-bit integer which will be seeded as the value on a miss. Must be
combined with an N flag.

- D(token): delta to apply

An unsigned integer to either add or subtract from the currently stored
number.

- T(token): update TTL

On success, sets the remaining TTL to the supplied value.

-M(token): mode switch. Takes a single character for the mode.

I: Increment mode (default)
+: Alias for increment
D: Decrement mode
-: Alias for decrement

Meta No-Op
----------

The meta no-op command exists solely to return a static response code. It
takes no flags, no arguments.

"mn\r\n"

This returns the static response:

"MN\r\n"

This command is useful when used with the 'q' flag and pipelining commands.
For example, with 'mg' the response lines are blank on miss when the 'q' flag
is supplied. If pipelining several 'mg's together with noreply semantics, an
"mn\r\n" command can be tagged to the end of the chain, which will return an
"MN\r\n", signalling to a client that all previous commands have been
processed.
